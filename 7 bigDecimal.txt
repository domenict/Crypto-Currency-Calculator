/* This script is critical to be able to allow Apps Script to utilize more than 16 digits. The ethereum block-chain has 15 decimal places by itself, which will lead to rounding errors with this Javascript-based language. bigDecimal converts numbers into strings that can be written to the sheet. Used throughout analyzeTransactions with bigDecimal(value a, value b, operator, # of decimals) formatting */

function bigDecimal (a, b, operator, decimals) {
  function getFactor(string) {
    let segments = string.split('.').concat('');
    if (segments[0][0] === '-') {
      return segments[0].length - 1 + 19;
    } else {
      return segments[0].length + 19;
    }
  }

  // All numbers must be formatted to the same length in order for calculations to be accurate
  let factor = '';
  if (operator === 'div') {
    factor = '000000000000000000000000000000'
  } else {
    aFactor = getFactor(a);
    bFactor = getFactor(b);
    
    if (aFactor >= bFactor) {
      factor = factor.padEnd(aFactor, '0');
    } else {
      factor = factor.padEnd(bFactor, '0');
    }
  }
  let factorLength = factor.length;
  
  //Converts string into big number
  function createBigNumber (string) {
    let segments = string.split('.').concat('');
    return BigInt(segments[0] + segments[1].padEnd(factorLength,'0').slice(0,factorLength));
  }
  a = createBigNumber(a);
  b = createBigNumber(b);
  
  //Runs operation
  let value;
  switch (operator) {
    case 'add':
      value = a + b;
      break;
    case 'sub':
      value = a - b;
      break;
    case 'mult':
      value = a * b / BigInt(1+factor);
      break;
    case 'div':
      value = (a * BigInt(1+factor) / b * BigInt(1+factor)) / BigInt(1+factor);
      break;
    case 'compare':
      if (a > b) {
        return 'more'
      } else if (a < b) {
        return 'less'
      } else {
        return 'equal'
      }
  }

  // Need this if # of decimals is specified in function as the default # of decimals otherwise the default is used
  if (decimals !== undefined) {
    value = value.toString();
    let diff = factorLength - decimals
    value = BigInt(value.slice(0, value.length - diff + 1))
    factorLength = factorLength - diff + 1;
  }

  // Handles rounding
  if (Number(value) !== 0) {
    let checkLast = value.toString();
    if (Number(checkLast[checkLast.length-1]) >= 5) {
      if (checkLast[0] !== '-') {
        value = value + BigInt('10');
      } else {
        value = value - BigInt('10');
      }
    }
  } else {
    return '0';
  }

  // Removes last value since this is excess to handle rounding and outputs big number as string
  value = value.toString();
  if (value[0] !== '-') {
    value = value.padStart(factorLength + 1, '0');
  } else {
    value = '-' + value.slice(1).padStart(factorLength + 1, '0');
  }
  value = value.slice(0,-factorLength) + '.' + value.slice(-factorLength,value.length-1);
  return value.replace(/\.?0+$/, '');
}

//https://onlinerandomtools.com/generate-random-fractions; used this to make sure I coded this thing correctly
function bigDecimalTest() {
  let a = '0.27272727272727272727272727273';
  let b = '10';
  let c = '946815791.13605197451';
  let d = '951.2';
  let e = '1111111111.1111111111111111116';
  let f;

  x = 0
  while (x<1) {
    f = bigDecimal(a, b, 'mult', 18);
    x++;
  }
  Logger.log(f);
  //1110263035.880524686268398097

  /*
  let a = '8954';
  let b = '15649.61266498153497';
  let c = '946815791.13605197451';
  let d = '951.2';
  let e = '1111111111.1111111111111111116';
  let f;
  f = bigDecimal(bigDecimal(bigDecimal(bigDecimal(a, b, 'mult'), c, 'sub'), d, 'div'), e, 'add');
  */
}








/* Pretty sure this is mostly residual, but used this for awhile to fix issues where some rounding resulted in values of things like 
.000000001 instead rounding to 0. Might still be in analyzeTransactions in situations where the sums of many divisions takes place, but shouldnt be necessary. Would not advise removal though... */

function bigRound(string) {
  let segments = string.split('.').concat('');
  let newString;
  let modulo = BigInt('1000');
  
  if (segments[1].length >= 18) {
    newString = segments[1].slice(0,18);
    let lastValue = Number(newString[newString.length-1]);
    let originalDecimal = BigInt(newString);

    let roundUp = originalDecimal + BigInt(10-lastValue);
    let roundDown = originalDecimal - BigInt(lastValue);
    let newDecimal;
    if (roundUp % modulo === BigInt('0') || roundDown % modulo === BigInt('0')) {
      if (roundUp % modulo === BigInt('0')) {
        newDecimal = roundUp;
      } else {
        newDecimal = roundDown;
      }
    } else {
      return string;
    }

    newString = newDecimal.toString();
    if (newDecimal.toString().length !== originalDecimal.toString().length && originalDecimal.toString().length === 18) {
      if (segments[0][0] === '-') {
          segments[0] = (BigInt(segments[0] + '0') - BigInt('10')).toString();
          segments[0] = segments[0].slice(0,segments[0].length);
      } else {
        segments[0] = (BigInt(segments[0]) + BigInt(1)).toString();
      }
      newString = newString.slice(1,18)
    }

    newString = segments[0] + '.' + newString.padStart(18, '0');
    newString = newString.replace(/\-?\.?0+$/, '');
    if (Number(newString) === 0) {
      return '0';
    } else {
      return newString
    }
  } else {
    return string;
  }
}

// Tests bigRound
function bigRoundTest () {
  Logger.log(bigRound('-0.99999999999999999999999'));
}








// Simple function that converts a cells with dollar values into the proper currency format
function convertToCurrency(string) {
  let value = bigDecimal(string, '0', 'add', '2');
  value = value.split('.');
  if (value[1] !== undefined) {
    value[1] = value[1].padEnd(2, '0');
  } else {
    value[1] = '00'
  }
  value = value[0] + '.' + value[1];
  
  return value;
}

function convertToCurrencyTEST() {
  Logger.log(convertToCurrency('156735.5'))
}